lns <- lns[-1]
}
chunks <- matrix(lns, ncol = 2, byrow = TRUE)
chunks <- data.frame(chunks)
names(chunks) <- c("start", "end")
codes <- grep("^```", x)
codes <- codes[seq(1, length(codes), 2)]
x <- gsub("^```.*", "", x)
}
cat(x, file = save_as, sep = "\n")
}
rmd2myst("Aufgaben_rmd/test.Rmd")
rmd2myst("Aufgaben_rmd/test.Rmd")
rmd2myst <- function(x) {
save_as <- gsub("\\.Rmd", ".md", x)
dat <- file(x)
x <- readLines(dat)
close(dat) #warum?
# yaml entfernen
if (grepl("---", x[1])) {
yaml_end <- grep("---", x)[2]
x <- x[(yaml_end + 1L):length(x)]
}
# neuer YAML Header -> Daten werden aus aufgabe_test Datei ausgelesen
dat_meta <- readLines(con = "aufgabe_test.md", n = -1L)
meta_length <- grep("---", dat_meta)[2] - grep("---", dat_meta)[1] + 1L
metadata <- readLines(con = "aufgabe_test.md", n = meta_length                                                                                                                          )
x <- c(metadata, x)
chunks <- grep("```", x)
if (length(chunks) == 0L) {
lns <- c(1L, length(x))
chunks <- matrix(lns, ncol = 2, byrow = TRUE)
chunks <- data.frame(chunks)
names(chunks) <- c("start", "end")
chunks$cell_type <- "markdown"
} else {
lns <- sort(c(
1L, length(x), chunks,
chunks[seq(1, length(chunks), 2)] - 1L,
chunks[seq(2, length(chunks), 2)] + 1L
))
lns <- lns[lns > 0 & lns <= length(x)]
if (chunks[length(chunks)] == length(x)) {
lns <- lns[-length(lns)]
}
if (chunks[1L] == 1L) {
lns <- lns[-1]
}
chunks <- matrix(lns, ncol = 2, byrow = TRUE)
chunks <- data.frame(chunks)
names(chunks) <- c("start", "end")
codes <- grep("^```", x)
codes <- codes[seq(1, length(codes), 2)]
x <- gsub("^```.*", "", x)
}
cat(x, file = save_as, sep = "\n")
}
rmd2myst("Aufgaben_rmd/test.Rmd")
rmd2myst <- function(x) {
rmd2myst <- function(x){
quit
q
c <- readLines(con = "aufgabe_test.md", n = 13L)
rmd2myst <- function(x) {
save_as <- gsub("\\.Rmd", ".md", x)
dat <- file(x)
x <- readLines(dat)
close(dat) #warum?
# yaml entfernen
if (grepl("---", x[1])) {
yaml_end <- grep("---", x)[2]
x <- x[(yaml_end + 1L):length(x)]
}
# neuer YAML Header -> Daten werden aus aufgabe_test Datei ausgelesen
dat_meta <- readLines(con = "aufgabe_test.md", n = -1L)
meta_length <- grep("---", dat_meta)[2] - grep("---", dat_meta)[1] + 1L
metadata <- readLines(con = "aufgabe_test.md", n = meta_length)  # Klammer funktioniert nicht????                                                                                                                     )
x <- c(metadata, x)
chunks <- grep("```", x)
cat(x, file = save_as, sep = "\n")
}
rmd2myst("Aufgaben_rmd/test.Rmd")
rmd2myst <- function(x) {
save_as <- gsub("\\.Rmd", ".md", x)
dat <- file(x)
x <- readLines(dat)
close(dat) #warum?
# yaml entfernen
if (grepl("---", x[1])) {
yaml_end <- grep("---", x)[2]
x <- x[(yaml_end + 1L):length(x)]
}
# neuer YAML Header -> Daten werden aus aufgabe_test Datei ausgelesen
dat_meta <- readLines(con = "aufgabe_test.md", n = -1L)
meta_length <- grep("---", dat_meta)[2] - grep("---", dat_meta)[1] + 1L
metadata <- readLines(con = "aufgabe_test.md", n = meta_length)  # Klammer funktioniert nicht????                                                                                                                     )
x <- c(metadata, x)
x <- gsub("```","```{code-cell} r", x)
cat(x, file = save_as, sep = "\n")
}
rmd2myst("Aufgaben_rmd/test.Rmd")
rmd2myst <- function(x) {
save_as <- gsub("\\.Rmd", ".md", x)
dat <- file(x)
x <- readLines(dat)
close(dat) #warum?
# yaml entfernen
if (grepl("---", x[1])) {
yaml_end <- grep("---", x)[2]
x <- x[(yaml_end + 1L):length(x)]
}
# neuer YAML Header -> Daten werden aus aufgabe_test Datei ausgelesen
dat_meta <- readLines(con = "aufgabe_test.md", n = -1L)
meta_length <- grep("---", dat_meta)[2] - grep("---", dat_meta)[1] + 1L
metadata <- readLines(con = "aufgabe_test.md", n = meta_length)  # Klammer funktioniert nicht????                                                                                                                     )
x <- c(metadata, x)
#x <- gsub("```","```{code-cell} r", x)
cat(x, file = save_as, sep = "\n")
}
rmd2myst("Aufgaben_rmd/test.Rmd")
x <- gsub("```{r}","```{code-cell} r", x)
rmd2myst <- function(x) {
save_as <- gsub("\\.Rmd", ".md", x)
dat <- file(x)
x <- readLines(dat)
close(dat) #warum?
# yaml entfernen
if (grepl("---", x[1])) {
yaml_end <- grep("---", x)[2]
x <- x[(yaml_end + 1L):length(x)]
}
# neuer YAML Header -> Daten werden aus aufgabe_test Datei ausgelesen
dat_meta <- readLines(con = "aufgabe_test.md", n = -1L)
meta_length <- grep("---", dat_meta)[2] - grep("---", dat_meta)[1] + 1L
metadata <- readLines(con = "aufgabe_test.md", n = meta_length)  # Klammer funktioniert nicht????                                                                                                                     )
x <- c(metadata, x)
x <- gsub("```{r}","```{code-cell} r", x)
cat(x, file = save_as, sep = "\n")
}
rmd2myst("Aufgaben_rmd/test.Rmd")
rmd2myst <- function(x) {
save_as <- gsub("\\.Rmd", ".md", x)
dat <- file(x)
x <- readLines(dat)
close(dat) #warum?
# yaml entfernen
if (grepl("---", x[1])) {
yaml_end <- grep("---", x)[2]
x <- x[(yaml_end + 1L):length(x)]
}
# neuer YAML Header -> Daten werden aus aufgabe_test Datei ausgelesen
dat_meta <- readLines(con = "aufgabe_test.md", n = -1L)
meta_length <- grep("---", dat_meta)[2] - grep("---", dat_meta)[1] + 1L
metadata <- readLines(con = "aufgabe_test.md", n = meta_length)  # Klammer funktioniert nicht????                                                                                                                     )
x <- c(metadata, x)
x <- gsub("[```{r}]","[```{code-cell} r]", x)
cat(x, file = save_as, sep = "\n")
}
rmd2myst("Aufgaben_rmd/test.Rmd")
rmd2myst <- function(x) {
save_as <- gsub("\\.Rmd", ".md", x)
dat <- file(x)
x <- readLines(dat)
close(dat) #warum?
# yaml entfernen
if (grepl("---", x[1])) {
yaml_end <- grep("---", x)[2]
x <- x[(yaml_end + 1L):length(x)]
}
# neuer YAML Header -> Daten werden aus aufgabe_test Datei ausgelesen
dat_meta <- readLines(con = "aufgabe_test.md", n = -1L)
meta_length <- grep("---", dat_meta)[2] - grep("---", dat_meta)[1] + 1L
metadata <- readLines(con = "aufgabe_test.md", n = meta_length)  # Klammer funktioniert nicht????                                                                                                                     )
x <- c(metadata, x)
x <- gsub("\\```{r}","\\```{code-cell} r", x)
cat(x, file = save_as, sep = "\n")
}
rmd2myst("Aufgaben_rmd/test.Rmd")
rmd2myst <- function(x) {
save_as <- gsub("\\.Rmd", ".md", x)
dat <- file(x)
x <- readLines(dat)
close(dat) #warum?
# yaml entfernen
if (grepl("---", x[1])) {
yaml_end <- grep("---", x)[2]
x <- x[(yaml_end + 1L):length(x)]
}
# neuer YAML Header -> Daten werden aus aufgabe_test Datei ausgelesen
dat_meta <- readLines(con = "aufgabe_test.md", n = -1L)
meta_length <- grep("---", dat_meta)[2] - grep("---", dat_meta)[1] + 1L
metadata <- readLines(con = "aufgabe_test.md", n = meta_length)  # Klammer funktioniert nicht????                                                                                                                     )
x <- c(metadata, x)
x <- gsub("```\\{r\\}","```\\{code-cell\\} r", x)
cat(x, file = save_as, sep = "\n")
}
rmd2myst("Aufgaben_rmd/test.Rmd")
dat <- data.frame(c(1,2,3,4), c(5,6,7,8))
View(dat)
dat <- data.frame(c(1,2,3,4), c(5,6,7,8), row.names = c("Spalte 1","Spalte 2"))
dat <- data.frame(c(1,2,3,4), c(5,6,7,8), row.names = "Spalte 1","Spalte 2")
dat <- data.frame(c(1,2,3,4), c(5,6,7,8), row.names = c(Spalte 1,Spalte 2))
dat <- data.frame(c(1,2,3,4), c(5,6,7,8), row.names = c('Spalte 1','Spalte 2'))
View(dat)
dat <- data.frame(Spalte 1 = c(1,2,3,4), c(5,6,7,8))
dat <- data.frame("Spalte 1" = c(1,2,3,4), c(5,6,7,8))
View(dat)
dat <- data.frame("Spalte 1" = c(1,2,3,4), "Spalte 2" = c(5,6,7,8))
plot(dat)
data <- faithful[1:4, ]
knitr::kable(data,
caption = "Table with kable")
data <- faithful[1:4, ]
knitr::kable(data, caption = "Tabelle")
data <- cars[1:4, ]
knitr::kable(data, caption = "Tabelle")
#' rmd2myst
#' @param file_name Name der Rmd Datei. Diese muss sich im aktuellen working directory befinden
#' @param myst_yaml optional: YAML header für die myst - Datei
#' @return erstellt eine .md Datei im myst - Style
rmd2myst <- function(file_name, myst_yaml = NULL) {
# Einlesen der Rmd Datei
save_as <- gsub("\\.Rmd", ".md", x)
dat <- file(x)
x <- readLines(dat)
close(dat)
# Leere Zeilen zu Beginn der Datei entfernen, falls die Datei nicht
# mit dem yaml header beginnt.
for(i in 1:length(x))
if(x[i] != "") break;
x <- x[i:length(x)]
# yaml entfernen
if (grepl("---", x[1])) {
yaml_end <- grep("---", x)[2]
x <- x[(yaml_end + 1L):length(x)]
}
# Neuer YAML Header. Wir definieren hier den neuen Standard header,
# falls keiner übergeben wurde
if(is.null(myst_yaml))
myst_yaml <-
"
---
jupytext:
formats: md:myst
text_representation:
extension: .md
format_name: myst
format_version: 0.13
jupytext_version: 1.11.5
kernelspec:
display_name: R
language: R
name: ir
---
"
x <- c(myst_yaml,
x)
# Ersetzen der code-chunks
x <- gsub(pattern = "```\\{ *r[ \\sa-zA-Z0-9\\_]*\\}",
replacement = "```\\{code-cell\\} r",
x = x)
# Überprüfen, ob alle code-chunks ersetzt wurden:
if(any(grepl(pattern = "```\\{[\\s]*r", x = x))){
stop("Die folgenden code-chunk konnte nicht automatisch übersetzt werden: \n",
paste0(x[grepl(pattern = "```\\{[\\s]*r", x = x)], collapse = "\n")
)
}
cat(x, file = save_as, sep = "\n")
}
rmd2myst("Aufgaben_rmd/test_2.Rmd")
# Einlesen der Rmd Datei
save_as <- gsub("\\.Rmd", ".md", file_name)
dat <- file(file_name)
x <- readLines(dat)
#' rmd2myst
#' @param file_name Name der Rmd Datei. Diese muss sich im aktuellen working directory befinden
#' @param myst_yaml optional: YAML header für die myst - Datei
#' @return erstellt eine .md Datei im myst - Style
rmd2myst <- function(file_name, myst_yaml = NULL) {
# Einlesen der Rmd Datei
save_as <- gsub("\\.Rmd", ".md", file_name)
dat <- file(file_name)
x <- readLines(dat)
close(dat)
# Leere Zeilen zu Beginn der Datei entfernen, falls die Datei nicht
# mit dem yaml header beginnt.
for(i in 1:length(x))
if(x[i] != "") break;
x <- x[i:length(x)]
# yaml entfernen
if (grepl("---", x[1])) {
yaml_end <- grep("---", x)[2]
x <- x[(yaml_end + 1L):length(x)]
}
# Neuer YAML Header. Wir definieren hier den neuen Standard header,
# falls keiner übergeben wurde
if(is.null(myst_yaml))
myst_yaml <-
"
---
jupytext:
formats: md:myst
text_representation:
extension: .md
format_name: myst
format_version: 0.13
jupytext_version: 1.11.5
kernelspec:
display_name: R
language: R
name: ir
---
"
x <- c(myst_yaml,
x)
# Ersetzen der code-chunks
x <- gsub(pattern = "```\\{ *r[ \\sa-zA-Z0-9\\_]*\\}",
replacement = "```\\{code-cell\\} r",
x = x)
# Überprüfen, ob alle code-chunks ersetzt wurden:
if(any(grepl(pattern = "```\\{[\\s]*r", x = x))){
stop("Die folgenden code-chunk konnte nicht automatisch übersetzt werden: \n",
paste0(x[grepl(pattern = "```\\{[\\s]*r", x = x)], collapse = "\n")
)
}
cat(x, file = save_as, sep = "\n")
}
rmd2myst("Aufgaben_rmd/test_2.Rmd")
rmd2myst("Aufgaben_rmd/test_2.Rmd")
rmd2myst("Aufgaben_rmd/test_2.Rmd")
#' rmd2myst
#' @param file_name Name der Rmd Datei. Diese muss sich im aktuellen working directory befinden
#' @param myst_yaml optional: YAML header für die myst - Datei
#' @return erstellt eine .md Datei im myst - Style
rmd2myst <- function(file_name, myst_yaml = NULL) {
# Einlesen der Rmd Datei
save_as <- gsub("\\.Rmd", ".md", file_name)
dat <- file(file_name)
x <- readLines(dat)
close(dat)
# Leere Zeilen zu Beginn der Datei entfernen, falls die Datei nicht
# mit dem yaml header beginnt.
for(i in 1:length(x))
if(x[i] != "") break;
x <- x[i:length(x)]
# yaml entfernen
if (grepl("---", x[1])) {
yaml_end <- grep("---", x)[2]
x <- x[(yaml_end + 1L):length(x)]
}
# Neuer YAML Header. Wir definieren hier den neuen Standard header,
# falls keiner übergeben wurde
if(is.null(myst_yaml))
myst_yaml <-
"
---
jupytext:
formats: md:myst
text_representation:
extension: .md
format_name: myst
format_version: 0.13
jupytext_version: 1.11.5
kernelspec:
display_name: R
language: R
name: ir
---
"
x <- c(myst_yaml,
x)
# Ersetzen der code-chunks
x <- gsub(pattern = "```\\{ *r[ \\sa-zA-Z0-9\\_]*\\}",
replacement = "```\\{code-cell\\} r",
x = x)
# Überprüfen, ob alle code-chunks ersetzt wurden:
if(any(grepl(pattern = "```\\{[\\s]*r", x = x))){
stop("Die folgenden code-chunk konnte nicht automatisch übersetzt werden: \n",
paste0(x[grepl(pattern = "```\\{[\\s]*r", x = x)], collapse = "\n")
)
}
cat(x, file = save_as, sep = "\n")
}
rmd2myst("Aufgaben_rmd/test_2.Rmd")
rmd2myst("Aufgaben_rmd/test_2.Rmd")
dat_namen <- list.files("Aufgaben_rmd",full.names=T)
dat_namen <- list.files("Aufgaben_rmd",full.names=T)
lapply(dat_namen,rmd2myst)
dat_namen <- list.files("Aufgaben_rmd",full.names=T)
lapply(dat_namen,rmd2myst)
dat_namen <- list.files("Aufgaben_rmd",full.names=T)
lapply(dat_namen,rmd2myst)
dat_namen <- list.files("Aufgaben_rmd",full.names=T)
lapply(dat_namen,rmd2myst)
dat_namen <- list.files("Aufgaben_rmd",full.names=T)
lapply(dat_namen,rmd2myst)
dat_namen <- list.files("Aufgaben_rmd",full.names=T)
lapply(dat_namen,rmd2myst)
lapply(dat_namen,rmd2myst)
#' rmd2myst
#' @param file_name Name der Rmd Datei. Diese muss sich im aktuellen working directory befinden
#' @param myst_yaml optional: YAML header für die myst - Datei
#' @return erstellt eine .md Datei im myst - Style
rmd2myst <- function(file_name, myst_yaml = NULL) {
# Einlesen der Rmd Datei
save_as <- gsub("\\.Rmd", ".md", file_name)
dat <- file(file_name)
x <- readLines(dat)
close(dat)
# Leere Zeilen zu Beginn der Datei entfernen, falls die Datei nicht
# mit dem yaml header beginnt.
for(i in 1:length(x))
if(x[i] != "") break;
x <- x[i:length(x)]
# yaml entfernen
if (grepl("---", x[1])) {
yaml_end <- grep("---", x)[2]
x <- x[(yaml_end + 1L):length(x)]
}
# Neuer YAML Header. Wir definieren hier den neuen Standard header,
# falls keiner übergeben wurde
if(is.null(myst_yaml))
myst_yaml <-
"
---
jupytext:
formats: md:myst
text_representation:
extension: .md
format_name: myst
format_version: 0.13
jupytext_version: 1.11.5
kernelspec:
display_name: R
language: R
name: ir
---
"
x <- c(myst_yaml,
x)
# Ersetzen der code-chunks
x <- gsub(pattern = "```\\{ *r[ \\sa-zA-Z0-9\\_]*\\}",
replacement = "```\\{code-cell\\} r",
x = x)
# Überprüfen, ob alle code-chunks ersetzt wurden:
if(any(grepl(pattern = "```\\{[\\s]*r", x = x))){
stop("Die folgenden code-chunk konnte nicht automatisch übersetzt werden: \n",
paste0(x[grepl(pattern = "```\\{[\\s]*r", x = x)], collapse = "\n")
)
}
cat(x, file = paste0("Aufgaben_rmd/",save_as), sep = "\n")
}
dat_namen <- list.files("Aufgaben_rmd",full.names=T)
lapply(dat_namen,rmd2myst)
dat_namen <- list.files("Aufgaben_rmd",full.names=T)
lapply(dat_namen,rmd2myst)
#' rmd2myst
#' @param file_name Name der Rmd Datei. Diese muss sich im aktuellen working directory befinden
#' @param myst_yaml optional: YAML header für die myst - Datei
#' @return erstellt eine .md Datei im myst - Style
rmd2myst <- function(file_name, myst_yaml = NULL) {
# Einlesen der Rmd Datei
save_as <- gsub("\\.Rmd", ".md", file_name)
dat <- file(file_name)
x <- readLines(dat)
close(dat)
# Leere Zeilen zu Beginn der Datei entfernen, falls die Datei nicht
# mit dem yaml header beginnt.
for(i in 1:length(x))
if(x[i] != "") break;
x <- x[i:length(x)]
# yaml entfernen
if (grepl("---", x[1])) {
yaml_end <- grep("---", x)[2]
x <- x[(yaml_end + 1L):length(x)]
}
# Neuer YAML Header. Wir definieren hier den neuen Standard header,
# falls keiner übergeben wurde
if(is.null(myst_yaml))
myst_yaml <-
"
---
jupytext:
formats: md:myst
text_representation:
extension: .md
format_name: myst
format_version: 0.13
jupytext_version: 1.11.5
kernelspec:
display_name: R
language: R
name: ir
---
"
x <- c(myst_yaml,
x)
# Ersetzen der code-chunks
x <- gsub(pattern = "```\\{ *r[ \\sa-zA-Z0-9\\_]*\\}",
replacement = "```\\{code-cell\\} r",
x = x)
# Überprüfen, ob alle code-chunks ersetzt wurden:
if(any(grepl(pattern = "```\\{[\\s]*r", x = x))){
stop("Die folgenden code-chunk konnte nicht automatisch übersetzt werden: \n",
paste0(x[grepl(pattern = "```\\{[\\s]*r", x = x)], collapse = "\n")
)
}
# cat(x, file = paste0("Aufgaben_rmd/",save_as), sep = "\n")
cat(x, file = save_as, sep = "\n")
}
dat_namen <- list.files("Aufgaben_rmd",full.names=T)
lapply(dat_namen,rmd2myst)
